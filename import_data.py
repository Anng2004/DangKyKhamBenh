# import_data.py - Import d·ªØ li·ªáu m·∫´u cho h·ªá th·ªëng

import sys
from db import get_conn, init_db

def check_database_ready():
    """Ki·ªÉm tra database ƒë√£ s·∫µn s√†ng ch∆∞a"""
    try:
        conn = get_conn()
        cur = conn.cursor()
        
        # Ki·ªÉm tra b·∫£ng ch√≠nh c√≥ t·ªìn t·∫°i kh√¥ng
        cur.execute("SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME IN ('user', 'PhongKham', 'DM_DichVuKyThuat', 'BacSi')")
        table_count = cur.fetchone()[0]
        
        conn.close()
        return table_count >= 4
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
        return False

def import_phong_kham():
    """Import th√™m d·ªØ li·ªáu ph√≤ng kh√°m"""
    conn = get_conn()
    cur = conn.cursor()
    
    # D·ªØ li·ªáu ph√≤ng kh√°m m·∫´u
    phong_kham_data = [
        ('PK002', 'Ph√≤ng Nhi khoa'),
        ('PK003', 'Ph√≤ng S·∫£n ph·ª• khoa'),
        ('PK004', 'Ph√≤ng Tai M≈©i H·ªçng'),
        ('PK005', 'Ph√≤ng M·∫Øt'),
        ('PK006', 'Ph√≤ng Da li·ªÖu'),
        ('PK007', 'Ph√≤ng Tim m·∫°ch'),
        ('PK008', 'Ph√≤ng Th·∫ßn kinh'),
        ('PK009', 'Ph√≤ng C∆° x∆∞∆°ng kh·ªõp'),
        ('PK010', 'Ph√≤ng Ung b∆∞·ªõu'),
        ('PK011', 'Ph√≤ng C·∫•p c·ª©u'),
        ('PK012', 'Ph√≤ng X-Quang'),
        ('PK013', 'Ph√≤ng Si√™u √¢m'),
        ('PK014', 'Ph√≤ng X√©t nghi·ªám'),
        ('PK015', 'Ph√≤ng Ph·ª•c h·ªìi ch·ª©c nƒÉng'),
        ('PK02', 'Ph√≤ng c·∫•p c·ª©u')  # Ph√≤ng b·ªï sung
    ]
    
    print("üè• ƒêang import d·ªØ li·ªáu Ph√≤ng kh√°m...")
    for ma_phong, ten_phong in phong_kham_data:
        try:
            # Check if already exists
            cur.execute("SELECT COUNT(*) FROM PhongKham WHERE MaPhong = ?", (ma_phong,))
            exists = cur.fetchone()[0]
            
            if exists == 0:
                cur.execute("""
                    INSERT INTO PhongKham(PK_ID, MaPhong, TenPhong) 
                    VALUES (NEWID(), ?, ?)
                """, (ma_phong, ten_phong))
                print(f"  ‚úÖ ƒê√£ th√™m: {ma_phong} - {ten_phong}")
            else:
                print(f"  ‚ö†Ô∏è  ƒê√£ t·ªìn t·∫°i: {ma_phong} - {ten_phong}")
        except Exception as e:
            print(f"  ‚ùå L·ªói khi th√™m {ma_phong}: {e}")
    
    conn.commit()
    conn.close()

def import_dich_vu():
    """Import th√™m d·ªØ li·ªáu d·ªãch v·ª•"""
    conn = get_conn()
    cur = conn.cursor()
    
    # D·ªØ li·ªáu d·ªãch v·ª• m·∫´u
    dich_vu_data = [
        ('DV002', 'Kh√°m chuy√™n khoa Nhi', 120000),
        ('DV003', 'Kh√°m S·∫£n ph·ª• khoa', 150000),
        ('DV004', 'Kh√°m Tai M≈©i H·ªçng', 100000),
        ('DV005', 'Kh√°m M·∫Øt', 80000),
        ('DV006', 'Kh√°m Da li·ªÖu', 90000),
        ('DV007', 'Kh√°m Tim m·∫°ch', 200000),
        ('DV008', 'Kh√°m Th·∫ßn kinh', 180000),
        ('DV009', 'Kh√°m C∆° x∆∞∆°ng kh·ªõp', 130000),
        ('DV010', 'Kh√°m Ung b∆∞·ªõu', 250000),
        ('DV011', 'C·∫•p c·ª©u', 300000),
        ('DV012', 'Ch·ª•p X-Quang', 150000),
        ('DV013', 'Si√™u √¢m t·ªïng qu√°t', 200000),
        ('DV014', 'Si√™u √¢m thai', 180000),
        ('DV015', 'X√©t nghi·ªám m√°u t·ªïng qu√°t', 100000),
        ('DV016', 'X√©t nghi·ªám sinh h√≥a', 150000),
        ('DV017', 'X√©t nghi·ªám n∆∞·ªõc ti·ªÉu', 50000),
        ('DV018', 'Ch·ª•p CT Scanner', 500000),
        ('DV019', 'Ch·ª•p MRI', 800000),
        ('DV020', 'N·ªôi soi d·∫° d√†y', 300000),
        ('DV021', 'ƒêi·ªán tim', 80000),
        ('DV022', 'ƒêo huy·∫øt √°p 24h', 200000),
        ('DV023', 'Ph·ª•c h·ªìi ch·ª©c nƒÉng', 150000),
        ('DV024', 'V·∫≠t l√Ω tr·ªã li·ªáu', 120000),
        ('DV025', 'T∆∞ v·∫•n dinh d∆∞·ª°ng', 100000)
    ]
    
    print("ü©∫ ƒêang import d·ªØ li·ªáu D·ªãch v·ª•...")
    for ma_dv, ten_dv, gia in dich_vu_data:
        try:
            # Check if already exists
            cur.execute("SELECT COUNT(*) FROM DM_DichVuKyThuat WHERE MaDichVu = ?", (ma_dv,))
            exists = cur.fetchone()[0]
            
            if exists == 0:
                cur.execute("""
                    INSERT INTO DM_DichVuKyThuat(dv_id, MaDichVu, TenDichVu, GiaDichVu) 
                    VALUES (NEWID(), ?, ?, ?)
                """, (ma_dv, ten_dv, gia))
                print(f"  ‚úÖ ƒê√£ th√™m: {ma_dv} - {ten_dv} - {gia:,}ƒë")
            else:
                print(f"  ‚ö†Ô∏è  ƒê√£ t·ªìn t·∫°i: {ma_dv} - {ten_dv}")
        except Exception as e:
            print(f"  ‚ùå L·ªói khi th√™m {ma_dv}: {e}")
    
    conn.commit()
    conn.close()

def import_bac_si():
    """Import d·ªØ li·ªáu b√°c sƒ©"""
    conn = get_conn()
    cur = conn.cursor()
    
    # D·ªØ li·ªáu b√°c sƒ© (kh√¥ng c√≥ PK_ID, s·∫Ω assign sau)
    bac_si_data = [
        ('BS001', 'BS. Nguy·ªÖn VƒÉn An', 'N·ªôi t·ªïng qu√°t', '0901234567', 'bs.an@hospital.com'),
        ('BS002', 'TS.BS. Tr·∫ßn Th·ªã B√¨nh', 'Nhi khoa', '0907654321', 'bs.binh@hospital.com'),
        ('BS003', 'PGS.TS. L√™ VƒÉn C∆∞·ªùng', 'S·∫£n ph·ª• khoa', '0912345678', 'bs.cuong@hospital.com'),
        ('BS004', 'BS. Ph·∫°m Th·ªã Dung', 'Tai M≈©i H·ªçng', '0987654321', 'bs.dung@hospital.com'),
        ('BS005', 'BS. Ho√†ng Minh Tuan', 'M·∫Øt', '0934567890', 'bs.tuan@hospital.com'),
        ('BS006', 'BS. ƒêinh Th·ªã Hoa', 'Da li·ªÖu', '0923456789', 'bs.hoa@hospital.com'),
        ('BS007', 'GS.TS. V≈© C√¥ng Minh', 'Tim m·∫°ch', '0945678901', 'bs.minh@hospital.com'),
        ('BS008', 'PGS. Ng√¥ Th·ªã Linh', 'Th·∫ßn kinh', '0956789012', 'bs.linh@hospital.com'),
        ('BS009', 'BS. B√πi VƒÉn Khoa', 'C∆° x∆∞∆°ng kh·ªõp', '0967890123', 'bs.khoa@hospital.com'),
        ('BS010', 'TS.BS. Mai Th·ªã Lan', 'Ung b∆∞·ªõu', '0978901234', 'bs.lan@hospital.com'),
        ('BS011', 'BS. Tr·ªãnh VƒÉn Nam', 'C·∫•p c·ª©u', '0989012345', 'bs.nam@hospital.com'),
        ('BS012', 'BS. L√Ω Th·ªã Oanh', 'Ch·∫©n ƒëo√°n h√¨nh ·∫£nh', '0990123456', 'bs.oanh@hospital.com'),
        ('BS013', 'BS. ƒê·ªó Minh Ph√∫', 'Ch·∫©n ƒëo√°n h√¨nh ·∫£nh', '0901234560', 'bs.phu@hospital.com'),
        ('BS014', 'BS. Cao Th·ªã Quy√™n', 'X√©t nghi·ªám', '0912345601', 'bs.quyen@hospital.com'),
        ('BS015', 'BS. L∆∞∆°ng VƒÉn S∆°n', 'Ph·ª•c h·ªìi ch·ª©c nƒÉng', '0923456012', 'bs.son@hospital.com'),
    ]
    
    print("üë®‚Äç‚öïÔ∏è ƒêang import d·ªØ li·ªáu B√°c sƒ©...")
    for ma_bs, ho_ten, chuyen_khoa, sdt, email in bac_si_data:
        try:
            # Check if already exists
            cur.execute("SELECT COUNT(*) FROM BacSi WHERE MaBacSi = ?", (ma_bs,))
            exists = cur.fetchone()[0]
            
            if exists == 0:
                cur.execute("""
                    INSERT INTO BacSi(MaBacSi, HoTen, ChuyenKhoa, SoDienThoai, Email) 
                    VALUES (?, ?, ?, ?, ?)
                """, (ma_bs, ho_ten, chuyen_khoa, sdt, email))
                print(f"  ‚úÖ ƒê√£ th√™m: {ma_bs} - {ho_ten} - {chuyen_khoa}")
            else:
                print(f"  ‚ö†Ô∏è  ƒê√£ t·ªìn t·∫°i: {ma_bs} - {ho_ten}")
        except Exception as e:
            print(f"  ‚ùå L·ªói khi th√™m {ma_bs}: {e}")
    
    conn.commit()
    conn.close()

def assign_doctors_to_clinics():
    """G√°n b√°c sƒ© v√†o ph√≤ng kh√°m"""
    conn = get_conn()
    cur = conn.cursor()
    
    # Mapping b√°c sƒ© - ph√≤ng kh√°m
    assignments = [
        ('BS001', 'PK001'),  # BS. Nguy·ªÖn VƒÉn An -> Ph√≤ng N·ªôi t·ªïng qu√°t
        ('BS002', 'PK002'),  # TS.BS. Tr·∫ßn Th·ªã B√¨nh -> Ph√≤ng Nhi khoa
        ('BS003', 'PK003'),  # PGS.TS. L√™ VƒÉn C∆∞·ªùng -> Ph√≤ng S·∫£n ph·ª• khoa
        ('BS004', 'PK004'),  # BS. Ph·∫°m Th·ªã Dung -> Ph√≤ng Tai M≈©i H·ªçng
        ('BS005', 'PK005'),  # BS. Ho√†ng Minh Tuan -> Ph√≤ng M·∫Øt
        ('BS006', 'PK006'),  # BS. ƒêinh Th·ªã Hoa -> Ph√≤ng Da li·ªÖu
        ('BS007', 'PK007'),  # GS.TS. V≈© C√¥ng Minh -> Ph√≤ng Tim m·∫°ch
        ('BS008', 'PK008'),  # PGS. Ng√¥ Th·ªã Linh -> Ph√≤ng Th·∫ßn kinh
        ('BS009', 'PK009'),  # BS. B√πi VƒÉn Khoa -> Ph√≤ng C∆° x∆∞∆°ng kh·ªõp
        ('BS010', 'PK010'),  # TS.BS. Mai Th·ªã Lan -> Ph√≤ng Ung b∆∞·ªõu
        ('BS011', 'PK011'),  # BS. Tr·ªãnh VƒÉn Nam -> Ph√≤ng C·∫•p c·ª©u
        ('BS012', 'PK012'),  # BS. L√Ω Th·ªã Oanh -> Ph√≤ng X-Quang
        ('BS013', 'PK012'),  # BS. ƒê·ªó Minh Ph√∫ -> Ph√≤ng X-Quang (shared)
        ('BS014', 'PK014'),  # BS. Cao Th·ªã Quy√™n -> Ph√≤ng X√©t nghi·ªám
        ('BS015', 'PK015'),  # BS. L∆∞∆°ng VƒÉn S∆°n -> Ph√≤ng Ph·ª•c h·ªìi ch·ª©c nƒÉng
    ]
    
    print("üîÑ ƒêang g√°n b√°c sƒ© v√†o ph√≤ng kh√°m...")
    for ma_bs, ma_pk in assignments:
        try:
            # Get BS_ID and PK_ID
            cur.execute("SELECT BS_ID FROM BacSi WHERE MaBacSi = ?", (ma_bs,))
            bs_row = cur.fetchone()
            if not bs_row:
                print(f"  ‚ùå Kh√¥ng t√¨m th·∫•y b√°c sƒ© {ma_bs}")
                continue
            bs_id = bs_row.BS_ID
            
            cur.execute("SELECT PK_ID FROM PhongKham WHERE MaPhong = ?", (ma_pk,))
            pk_row = cur.fetchone()
            if not pk_row:
                print(f"  ‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng kh√°m {ma_pk}")
                continue
            pk_id = pk_row.PK_ID
            
            # Update PhongKham with BS_ID (one doctor per clinic for primary assignment)
            cur.execute("SELECT BS_ID FROM PhongKham WHERE PK_ID = ?", (pk_id,))
            current_bs = cur.fetchone()
            
            if not current_bs or current_bs.BS_ID is None:
                cur.execute("UPDATE PhongKham SET BS_ID = ? WHERE PK_ID = ?", (bs_id, pk_id))
                print(f"  ‚úÖ ƒê√£ g√°n b√°c sƒ© {ma_bs} v√†o ph√≤ng kh√°m {ma_pk}")
            else:
                print(f"  ‚ö†Ô∏è  Ph√≤ng kh√°m {ma_pk} ƒë√£ c√≥ b√°c sƒ© ch√≠nh")
                
        except Exception as e:
            print(f"  ‚ùå L·ªói khi g√°n {ma_bs}: {e}")
    
    conn.commit()
    conn.close()

def show_statistics():
    """Hi·ªÉn th·ªã th·ªëng k√™ sau khi import"""
    conn = get_conn()
    cur = conn.cursor()
    
    # ƒê·∫øm ph√≤ng kh√°m
    cur.execute("SELECT COUNT(*) FROM PhongKham")
    pk_count = cur.fetchone()[0]
    
    # ƒê·∫øm d·ªãch v·ª•
    cur.execute("SELECT COUNT(*) FROM DM_DichVuKyThuat")
    dv_count = cur.fetchone()[0]
    
    # ƒê·∫øm b√°c sƒ©
    cur.execute("SELECT COUNT(*) FROM BacSi")
    bs_count = cur.fetchone()[0]
    
    conn.close()
    
    print("\n" + "="*50)
    print("           üìä TH·ªêNG K√ä SAU IMPORT")
    print("="*50)
    print(f"üè• T·ªïng s·ªë Ph√≤ng kh√°m: {pk_count}")
    print(f"ü©∫ T·ªïng s·ªë D·ªãch v·ª•: {dv_count}")
    print(f"üë®‚Äç‚öïÔ∏è T·ªïng s·ªë B√°c sƒ©: {bs_count}")
    print("="*50)

def main():
    print("="*60)
    print("     üöÄ IMPORT D·ªÆ LI·ªÜU M·∫™U - PH√íNG KH√ÅM, D·ªäCH V·ª§ & B√ÅC Sƒ®")
    print("="*60)
    
    try:
        # Import ph√≤ng kh√°m
        import_phong_kham()
        print()
        
        # Import d·ªãch v·ª•
        import_dich_vu()
        print()
        
        # Import b√°c sƒ©
        import_bac_si()
        print()
        
        # Hi·ªÉn th·ªã th·ªëng k√™
        show_statistics()
        
        print("\nüéâ Import ho√†n t·∫•t!")
        
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh import: {e}")

def main():
    """Main function to import sample data"""
    print("üöÄ B·∫Øt ƒë·∫ßu import d·ªØ li·ªáu m·∫´u...")
    print("=" * 60)
    
    try:
        # Check database connection first
        check_database_ready()
        
        # Import data in correct order
        import_phong_kham()
        print()
        
        import_dich_vu()
        print()
        
        import_bac_si()
        print()
        
        assign_doctors_to_clinics()
        print()
        
        print("=" * 60)
        print("‚úÖ Ho√†n th√†nh import d·ªØ li·ªáu m·∫´u!")
        print("üìä D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng ƒë·ªÉ s·ª≠ d·ª•ng")
        print()
        print("üîç Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ import:")
        
        # Show summary
        conn = get_conn()
        cur = conn.cursor()
        
        cur.execute("SELECT COUNT(*) FROM PhongKham")
        pk_count = cur.fetchone()[0]
        print(f"   ‚Ä¢ Ph√≤ng kh√°m: {pk_count} records")
        
        cur.execute("SELECT COUNT(*) FROM DM_DichVuKyThuat")
        dv_count = cur.fetchone()[0]
        print(f"   ‚Ä¢ D·ªãch v·ª•: {dv_count} records")
        
        cur.execute("SELECT COUNT(*) FROM BacSi")
        bs_count = cur.fetchone()[0]
        print(f"   ‚Ä¢ B√°c sƒ©: {bs_count} records")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå L·ªói khi import d·ªØ li·ªáu: {e}")
        print("üí° Vui l√≤ng ki·ªÉm tra:")
        print("   1. Database server ƒë√£ kh·ªüi ƒë·ªông?")
        print("   2. C·∫•u h√¨nh k·∫øt n·ªëi trong db.py ƒë√£ ƒë√∫ng?")
        print("   3. ƒê√£ ch·∫°y init_db() ƒë·ªÉ t·∫°o schema?")
        sys.exit(1)

if __name__ == "__main__":
    main()