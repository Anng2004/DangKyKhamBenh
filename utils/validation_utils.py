#!/usr/bin/env python3

import re
from datetime import datetime
from typing import Tuple, Optional
from .qr_utils import phantich_cccd, lay_thongtin_tinhmoi_tu_tinhcu
from .message_utils import error, warning, success, print_separator

def validate_cccd_format(cccd: str) -> Tuple[bool, str]:
    cccd = cccd.strip()
    
    if not cccd:
        return False, "CCCD kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"
    
    if not cccd.isdigit():
        return False, "CCCD ch·ªâ ƒë∆∞·ª£c ch·ª©a s·ªë!"
    
    if len(cccd) != 12:
        return False, f"CCCD ph·∫£i c√≥ ƒë√∫ng 12 ch·ªØ s·ªë! (Hi·ªán t·∫°i: {len(cccd)} ch·ªØ s·ªë)"
    
    return True, ""

def validate_birth_date_format(ngay_sinh: str) -> Tuple[bool, str, str]:
    if not ngay_sinh:
        return False, "Ng√†y sinh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", ""
    
    ngay_sinh = ngay_sinh.strip()
    
    #DD/MM/YYYY 
    if re.match(r'^\d{1,2}/\d{1,2}/\d{4}$', ngay_sinh):
        try:
            parts = ngay_sinh.split('/')
            day, month, year = int(parts[0]), int(parts[1]), int(parts[2])
            
            datetime(year, month, day)
            
            formatted = f"{day:02d}/{month:02d}/{year}"
            return True, "", formatted
        except ValueError:
            return False, f"Ng√†y sinh kh√¥ng h·ª£p l·ªá: {ngay_sinh}", ""
    
    #DD-MM-YYYY
    elif re.match(r'^\d{1,2}-\d{1,2}-\d{4}$', ngay_sinh):
        try:
            parts = ngay_sinh.split('-')
            day, month, year = int(parts[0]), int(parts[1]), int(parts[2])
            
            datetime(year, month, day)
            
            formatted = f"{day:02d}/{month:02d}/{year}"
            return True, "", formatted
        except ValueError:
            return False, f"Ng√†y sinh kh√¥ng h·ª£p l·ªá: {ngay_sinh}", ""
    
    #DDMMYYYY
    elif re.match(r'^\d{8}$', ngay_sinh):
        try:
            day = int(ngay_sinh[:2])
            month = int(ngay_sinh[2:4])
            year = int(ngay_sinh[4:8])
            
            datetime(year, month, day)
            
            formatted = f"{day:02d}/{month:02d}/{year}"
            return True, "", formatted
        except ValueError:
            return False, f"Ng√†y sinh kh√¥ng h·ª£p l·ªá: {ngay_sinh}", ""
    
    #YYYY only
    elif re.match(r'^\d{4}$', ngay_sinh):
        try:
            year = int(ngay_sinh)
            if year < 1900 or year > datetime.now().year:
                return False, f"NƒÉm sinh kh√¥ng h·ª£p l·ªá: {year}", ""
            
            # Default to January 1st
            formatted = f"01/01/{year}"
            return True, "", formatted
        except ValueError:
            return False, f"NƒÉm sinh kh√¥ng h·ª£p l·ªá: {ngay_sinh}", ""
    
    else:
        return False, (
            f"ƒê·ªãnh d·∫°ng ng√†y sinh kh√¥ng ƒë√∫ng: {ngay_sinh}\n"
            "C√°c ƒë·ªãnh d·∫°ng ƒë∆∞·ª£c h·ªó tr·ª£:\n"
            "  - DD/MM/YYYY (v√≠ d·ª•: 15/07/1986)\n"
            "  - DD-MM-YYYY (v√≠ d·ª•: 15-07-1986)\n"
            "  - DDMMYYYY (v√≠ d·ª•: 15071986)\n"
            "  - YYYY (v√≠ d·ª•: 1986)"
        ), ""

def Hien_thi_thong_tin_xac_nhan_benhnhan(ho_ten: str, gioi_tinh: str, ngay_sinh: str, so_cccd: str) -> None:
    print("\n" + "="*60)
    print("           TH√îNG TIN B·ªÜNH NH√ÇN V·ª™A T·∫°O")
    print_separator(60,"=")
    
    print(f"üì± CCCD: {so_cccd}")
    print(f"üë§ H·ªç t√™n: {ho_ten}")
    print(f"üìÖ Ng√†y sinh: {ngay_sinh}")
    print(f"‚ö§ Gi·ªõi t√≠nh: {gioi_tinh}")
    
    try:
        nam_sinh = int(ngay_sinh.split('/')[-1])
        print(f"üéÇ NƒÉm sinh (t·ª± ƒë·ªông): {nam_sinh}")
    except:
        pass
    
    username = f"{so_cccd}"
    print(f"\nüîë Th√¥ng tin ƒëƒÉng nh·∫≠p ƒë∆∞·ª£c t·∫°o:")
    print(f"   üìß Username: {username}")
    print(f"   üîí Password: D·ª±a tr√™n CCCD v√† ng√†y sinh(4 s·ªë cu·ªëi CCCD + ng√†y sinh (01/11/2025 => 011125))")
    
    print_separator(60,"=")

def nhap_thong_tin_cccd() -> str:
    while True:
        cccd = input("S·ªë CCCD (12 ch·ªØ s·ªë): ").strip()
        is_valid, error_msg = validate_cccd_format(cccd)
        
        if is_valid:
            return cccd
        else:
            error(error_msg)
            print("Vui l√≤ng nh·∫≠p l·∫°i!")

def nhap_thong_tin_ngaysinh() -> str:
    print("\nC√°c ƒë·ªãnh d·∫°ng ng√†y sinh ƒë∆∞·ª£c h·ªó tr·ª£:")
    print("  - DD/MM/YYYY (v√≠ d·ª•: 15/07/1986)")
    print("  - DD-MM-YYYY (v√≠ d·ª•: 15-07-1986)")
    print("  - DDMMYYYY (v√≠ d·ª•: 15071986)")
    print("  - YYYY (v√≠ d·ª•: 1986)")
    
    while True:
        ngay_sinh = input("Ng√†y sinh: ").strip()
        is_valid, error_msg, formatted_date = validate_birth_date_format(ngay_sinh)
        
        if is_valid:
            return formatted_date
        else:
            error(error_msg)
            print("Vui l√≤ng nh·∫≠p l·∫°i!")

def nhap_thong_tin_gioitinh(cccd: str) -> str:
    _, gioitinh_cccd, _, _ = phantich_cccd(cccd)
    
    if gioitinh_cccd:
        print(f"üí° H·ªá th·ªëng ph√¢n t√≠ch t·ª´ CCCD: Gi·ªõi t√≠nh = {gioitinh_cccd}")
        xac_nhan = input(f"X√°c nh·∫≠n gi·ªõi t√≠nh l√† '{gioitinh_cccd}'? (y/n): ").strip().lower()
        if not xac_nhan or xac_nhan in ['y', 'yes']:
            return gioitinh_cccd
    
    while True:
        gioi_tinh = input("Gi·ªõi t√≠nh (Nam/N·ªØ/Kh√°c): ").strip()
        if gioi_tinh in ['Nam', 'N·ªØ', 'Kh√°c']:
            return gioi_tinh
        else:
            error("Gi·ªõi t√≠nh ph·∫£i l√† 'Nam', 'N·ªØ' ho·∫∑c 'Kh√°c'!")
            print("Vui l√≤ng nh·∫≠p l·∫°i!")

def nhap_thong_tin_diachi_tinh(cccd: str) -> str:
    tinh_cu, _, _, tinh_moi = phantich_cccd(cccd)
    recommended_province = tinh_moi if tinh_moi else tinh_cu
    
    if recommended_province:
        print(f"üí° H·ªá th·ªëng ph√¢n t√≠ch t·ª´ CCCD: T·ªânh/TP = {recommended_province}")
        if tinh_cu and tinh_moi and tinh_cu != tinh_moi:
            print(f"   (C≈©: {tinh_cu} ‚Üí M·ªõi: {tinh_moi})")
        
        xac_nhan = input(f"X√°c nh·∫≠n t·ªânh/TP l√† '{recommended_province}'? (y/n): ").strip().lower()
        if not xac_nhan or xac_nhan in ['y', 'yes']:
            return recommended_province
    
    while True:
        tinh = input("T·ªânh/Th√†nh ph·ªë: ").strip()
        if tinh:
            return tinh
        else:
            error("T·ªânh/Th√†nh ph·ªë kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            print("Vui l√≤ng nh·∫≠p l·∫°i!")

def input_gioitinh_with_validation() -> str:
    while True:
        gioi_tinh = input("Gi·ªõi t√≠nh (Nam/N·ªØ/Kh√°c): ").strip()
        if gioi_tinh in ['Nam', 'N·ªØ', 'Kh√°c']:
            return gioi_tinh
        else:
            error("Gi·ªõi t√≠nh ph·∫£i l√† 'Nam', 'N·ªØ' ho·∫∑c 'Kh√°c'!")
            print("Vui l√≤ng nh·∫≠p l·∫°i!")

def Hien_thi_thong_tin_benhnhan(benh_nhan) -> None:
    print("\n" + "="*60)
    print("           TH√îNG TIN B·ªÜNH NH√ÇN ƒê√É T·ªíN T·∫†I")
    print_separator(60,"=")
    
    print(f"üì± CCCD: {benh_nhan.so_cccd}")
    print(f"üÜî M√£ BN: {benh_nhan.ma_bn}")
    print(f"üìã PID: {benh_nhan.pid}")
    print(f"üë§ H·ªç t√™n: {benh_nhan._ho_ten}")
    print(f"‚ö§ Gi·ªõi t√≠nh: {benh_nhan._gioi_tinh}")
    print(f"üéÇ NƒÉm sinh: {benh_nhan.nam_sinh}")

def nhap_thong_tin_hoten() -> str:
    while True:
        ho_ten = input("H·ªç t√™n: ").strip()
        if ho_ten:
            return ho_ten
        else:
            error("H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            print("Vui l√≤ng nh·∫≠p l·∫°i!")

def nhap_thong_tin_diachi_phuongxa() -> str:
    phuong_xa = input("Ph∆∞·ªùng/X√£ (c√≥ th·ªÉ ƒë·ªÉ tr·ªëng): ").strip()
    return phuong_xa

def display_benh_nhan_summary(benh_nhan) -> None:
    print("\n" + "="*50)
    print("         TH√îNG TIN B·ªÜNH NH√ÇN")
    print_separator(50,"=")
    
    print(f"üÜî M√£ BN: {benh_nhan.ma_bn}")
    print(f"üìã PID: {benh_nhan.pid}")
    print(f"üë§ H·ªç t√™n: {benh_nhan._ho_ten}")
    print(f"‚ö§ Gi·ªõi t√≠nh: {benh_nhan._gioi_tinh}")
    print(f"üéÇ NƒÉm sinh: {benh_nhan.nam_sinh}")
    print(f"üì± CCCD: {benh_nhan.so_cccd}")
    print_separator(50,"=")

def display_reception_summary(tiep_nhan, chi_phi: int) -> None:

    print("\n" + "="*60)
    print("           TH√îNG TIN ƒêƒÇNG K√ù TI·∫æP NH·∫¨N")
    print_separator(60,"=")
    
    print(f"üìã M√£ ti·∫øp nh·∫≠n: {tiep_nhan._ma_tn}")
    print(f"üìÖ Ng√†y ƒëƒÉng k√Ω: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    print(f"\nüë≥ TH√îNG TIN B·ªÜNH NH√ÇN:")
    print(f"   üÜî M√£ BN: {tiep_nhan._bn.ma_bn}")
    print(f"   üìã PID: {tiep_nhan._bn.pid}")
    print(f"   üë§ H·ªç t√™n: {tiep_nhan._bn._ho_ten}")
    print(f"   ‚ö§ Gi·ªõi t√≠nh: {tiep_nhan._bn._gioi_tinh}")
    print(f"   üéÇ NƒÉm sinh: {tiep_nhan._bn.nam_sinh}")
    print(f"   üì± CCCD: {tiep_nhan._bn.so_cccd}")
    
    print(f"\nü©∫ TH√îNG TIN D·ªäCH V·ª§:")
    if tiep_nhan._dv:
        print(f"   üìù M√£ DV: {tiep_nhan._dv._ma_dv}")
        print(f"   üíä T√™n DV: {tiep_nhan._dv._ten_dv}")
        print(f"   üí∞ Gi√° DV: {tiep_nhan._dv._gia:,}ƒë")
    else:
        error("Ch∆∞a c√≥ th√¥ng tin d·ªãch v·ª•")
    
    print(f"\nüè• TH√îNG TIN PH√íNG KH√ÅM:")
    if tiep_nhan._pk:
        print(f"   üö™ M√£ ph√≤ng: {tiep_nhan._pk._ma_phong}")
        print(f"   üè• T√™n ph√≤ng: {tiep_nhan._pk._ten_phong}")
    else:
         error("Ch∆∞a c√≥ th√¥ng tin ph√≤ng kh√°m")
    
    print(f"\nüë®‚Äç‚öïÔ∏è TH√îNG TIN B√ÅC Sƒ®:")
    if tiep_nhan._bs:
        print(f"   üÜî M√£ BS: {tiep_nhan._bs.ma_bs}")
        print(f"   üë§ H·ªç t√™n: {tiep_nhan._bs.ho_ten}")
        print(f"   ü©∫ Chuy√™n khoa: {tiep_nhan._bs.chuyen_khoa}")
    else:
         error("Ch∆∞a ch·ªçn b√°c sƒ©")
    
    print(f"\nüìã TH√îNG TIN KH√ÅM:")
    print(f"   üìù L√Ω do kh√°m: {tiep_nhan._ly_do}")
    print(f"   üí∞ Chi ph√≠ t·∫°m t√≠nh: {chi_phi:,}ƒë")
    
    print_separator(60,"=")

def xac_nhan_thong_tin(message: str) -> bool:
    response = input(f"{message} (y/n): ").strip().lower()
    return not response or response in ['y', 'yes']

def input_province_with_validation() -> str:
    while True:
        tinh = input("T·ªânh/Th√†nh ph·ªë: ").strip()
        if tinh:
            return tinh
        else:
            error("T·ªânh/Th√†nh ph·ªë kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            print("Vui l√≤ng nh·∫≠p l·∫°i!")