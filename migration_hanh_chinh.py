#!/usr/bin/env python3
"""
Migration tool for administrative division reorganization (NQ 202/2025/QH15)
C√¥ng c·ª• migration s·∫Øp x·∫øp ƒë∆°n v·ªã h√†nh ch√≠nh
"""

import json
from db import get_conn
from datetime import datetime

# D·ªØ li·ªáu s·∫Øp x·∫øp h√†nh ch√≠nh theo NQ 202/2025/QH15
ADMIN_REORGANIZATION = {
    "merged": [
        {"new": "Tuy√™n Quang", "includes": ["H√† Giang", "Tuy√™n Quang"]},
        {"new": "L√†o Cai", "includes": ["L√†o Cai", "Y√™n B√°i"]},
        {"new": "Th√°i Nguy√™n", "includes": ["B·∫Øc K·∫°n", "Th√°i Nguy√™n"]},
        {"new": "Ph√∫ Th·ªç", "includes": ["H√≤a B√¨nh", "Vƒ©nh Ph√∫c", "Ph√∫ Th·ªç"]},
        {"new": "B·∫Øc Ninh", "includes": ["B·∫Øc Giang", "B·∫Øc Ninh"]},
        {"new": "H∆∞ng Y√™n", "includes": ["Th√°i B√¨nh", "H∆∞ng Y√™n"]},
        {"new": "Th√†nh ph·ªë H·∫£i Ph√≤ng", "includes": ["H·∫£i D∆∞∆°ng", "Th√†nh ph·ªë H·∫£i Ph√≤ng"]},
        {"new": "Ninh B√¨nh", "includes": ["H√† Nam", "Ninh B√¨nh", "Nam ƒê·ªãnh"]},
        {"new": "Qu·∫£ng Tr·ªã", "includes": ["Qu·∫£ng B√¨nh", "Qu·∫£ng Tr·ªã"]},
        {"new": "Th√†nh ph·ªë ƒê√† N·∫µng", "includes": ["Qu·∫£ng Nam", "Th√†nh ph·ªë ƒê√† N·∫µng"]},
        {"new": "Qu·∫£ng Ng√£i", "includes": ["Qu·∫£ng Ng√£i", "Kon Tum"]},
        {"new": "Gia Lai", "includes": ["Gia Lai", "B√¨nh ƒê·ªãnh"]},
        {"new": "ƒê·∫Øk L·∫Øk", "includes": ["Ph√∫ Y√™n", "ƒê·∫Øk L·∫Øk"]},
        {"new": "Kh√°nh H√≤a", "includes": ["Kh√°nh H√≤a", "Ninh Thu·∫≠n"]},
        {"new": "L√¢m ƒê·ªìng", "includes": ["ƒê·∫Øk N√¥ng", "L√¢m ƒê·ªìng", "B√¨nh Thu·∫≠n"]},
        {"new": "Th√†nh ph·ªë H·ªì Ch√≠ Minh", "includes": ["B√¨nh D∆∞∆°ng", "Th√†nh ph·ªë H·ªì Ch√≠ Minh", "B√† R·ªãa - V≈©ng T√†u"]},
        {"new": "ƒê·ªìng Nai", "includes": ["B√¨nh Ph∆∞·ªõc", "ƒê·ªìng Nai"]},
        {"new": "T√¢y Ninh", "includes": ["Long An", "T√¢y Ninh"]},
        {"new": "Th√†nh ph·ªë C·∫ßn Th∆°", "includes": ["S√≥c TrƒÉng", "H·∫≠u Giang", "Th√†nh ph·ªë C·∫ßn Th∆°"]},
        {"new": "Vƒ©nh Long", "includes": ["B·∫øn Tre", "Vƒ©nh Long", "Tr√† Vinh"]},
        {"new": "ƒê·ªìng Th√°p", "includes": ["Ti·ªÅn Giang", "ƒê·ªìng Th√°p"]},
        {"new": "C√† Mau", "includes": ["B·∫°c Li√™u", "C√† Mau"]},
        {"new": "An Giang", "includes": ["Ki√™n Giang", "An Giang"]}
    ],
    "unchanged": [
        "Th√†nh ph·ªë H√† N·ªôi", "Cao B·∫±ng", "ƒêi·ªán Bi√™n", "H√† Tƒ©nh",
        "Lai Ch√¢u", "L·∫°ng S∆°n", "Ngh·ªá An", "Qu·∫£ng Ninh",
        "Thanh H√≥a", "S∆°n La", "Th√†nh ph·ªë Hu·∫ø"
    ]
}

def create_admin_tables():
    """T·∫°o c√°c b·∫£ng m·ªõi cho h·ªá th·ªëng h√†nh ch√≠nh"""
    conn = get_conn()
    cur = conn.cursor()
    
    print("üèõÔ∏è T·∫°o b·∫£ng h·ªá th·ªëng h√†nh ch√≠nh m·ªõi...")
    
    # 1. B·∫£ng DM_HanhChinhMoi (Danh m·ª•c h√†nh ch√≠nh m·ªõi)
    print("  üìã T·∫°o b·∫£ng DM_HanhChinhMoi...")
    cur.execute("""
    IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='DM_HanhChinhMoi' AND xtype='U')
    CREATE TABLE DM_HanhChinhMoi (
        MaHanhChinhMoi NVARCHAR(10) PRIMARY KEY,
        TenHanhChinhMoi NVARCHAR(100) NOT NULL,
        CapHanhChinh NVARCHAR(20) NOT NULL DEFAULT N'T·ªânh',
        TrangThai BIT DEFAULT 1,
        NgayHieuLuc DATE DEFAULT '2025-01-01',
        GhiChu NVARCHAR(200),
        created_at DATETIME DEFAULT GETDATE()
    );
    """)
    
    # 2. B·∫£ng DM_HanhChinhCu (Danh m·ª•c h√†nh ch√≠nh c≈©)
    print("  üìã T·∫°o b·∫£ng DM_HanhChinhCu...")
    cur.execute("""
    IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='DM_HanhChinhCu' AND xtype='U')
    CREATE TABLE DM_HanhChinhCu (
        MaHanhChinhCu NVARCHAR(10) PRIMARY KEY,
        TenHanhChinhCu NVARCHAR(100) NOT NULL,
        CapHanhChinh NVARCHAR(20) NOT NULL DEFAULT N'T·ªânh',
        TrangThai BIT DEFAULT 0,
        NgayHetHieuLuc DATE DEFAULT '2024-12-31',
        GhiChu NVARCHAR(200),
        created_at DATETIME DEFAULT GETDATE()
    );
    """)
    
    # 3. B·∫£ng DM_HanhChinhMoi_Map_Cu (Mapping gi·ªØa m·ªõi v√† c≈©)
    print("  üìã T·∫°o b·∫£ng DM_HanhChinhMoi_Map_Cu...")
    cur.execute("""
    IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='DM_HanhChinhMoi_Map_Cu' AND xtype='U')
    CREATE TABLE DM_HanhChinhMoi_Map_Cu (
        MapID UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
        MaHanhChinhMoi NVARCHAR(10) NOT NULL,
        MaHanhChinhCu NVARCHAR(10) NOT NULL,
        TyLeDanSo DECIMAL(5,2) DEFAULT 100.0,
        GhiChu NVARCHAR(200),
        created_at DATETIME DEFAULT GETDATE(),
        
        FOREIGN KEY (MaHanhChinhMoi) REFERENCES DM_HanhChinhMoi(MaHanhChinhMoi),
        FOREIGN KEY (MaHanhChinhCu) REFERENCES DM_HanhChinhCu(MaHanhChinhCu)
    );
    """)
    
    # 4. Kh√¥ng c·∫ßn th√™m c·ªôt TinhMoi - s·∫Ω c·∫≠p nh·∫≠t tr·ª±c ti·∫øp c·ªôt Tinh
    print("  ‚úÖ S·∫Ω c·∫≠p nh·∫≠t tr·ª±c ti·∫øp c·ªôt Tinh hi·ªán c√≥...")
    
    conn.commit()
    conn.close()
    print("‚úÖ T·∫°o b·∫£ng h√†nh ch√≠nh th√†nh c√¥ng!")

def populate_admin_data():
    """Populate d·ªØ li·ªáu v√†o c√°c b·∫£ng h√†nh ch√≠nh"""
    conn = get_conn()
    cur = conn.cursor()
    
    print("üìä Import d·ªØ li·ªáu h√†nh ch√≠nh...")
    
    # M√£ t·ªânh mapping (gi·ªØ nguy√™n t·ª´ qr_utils.py)
    province_codes = {
        '001': 'H√† N·ªôi', '002': 'H√† Giang', '004': 'Cao B·∫±ng', '006': 'B·∫Øc K·∫°n',
        '008': 'Tuy√™n Quang', '010': 'L√†o Cai', '011': 'ƒêi·ªán Bi√™n', '012': 'Lai Ch√¢u',
        '014': 'S∆°n La', '015': 'Y√™n B√°i', '017': 'Ho√† B√¨nh', '019': 'Th√°i Nguy√™n',
        '020': 'L·∫°ng S∆°n', '022': 'Qu·∫£ng Ninh', '024': 'B·∫Øc Giang', '025': 'Ph√∫ Th·ªç',
        '026': 'Vƒ©nh Ph√∫c', '027': 'B·∫Øc Ninh', '030': 'H·∫£i D∆∞∆°ng', '031': 'H·∫£i Ph√≤ng',
        '033': 'H∆∞ng Y√™n', '034': 'Th√°i B√¨nh', '035': 'H√† Nam', '036': 'Nam ƒê·ªãnh',
        '037': 'Ninh B√¨nh', '038': 'Thanh H√≥a', '040': 'Ngh·ªá An', '042': 'H√† Tƒ©nh',
        '044': 'Qu·∫£ng B√¨nh', '045': 'Qu·∫£ng Tr·ªã', '046': 'Th·ª´a Thi√™n Hu·∫ø',
        '048': 'ƒê√† N·∫µng', '049': 'Qu·∫£ng Nam', '051': 'Qu·∫£ng Ng√£i', '052': 'B√¨nh ƒê·ªãnh',
        '054': 'Ph√∫ Y√™n', '056': 'Kh√°nh H√≤a', '058': 'Ninh Thu·∫≠n', '060': 'B√¨nh Thu·∫≠n',
        '062': 'Kon Tum', '064': 'Gia Lai', '066': 'ƒê·∫Øk L·∫Øk', '067': 'ƒê·∫Øk N√¥ng',
        '068': 'L√¢m ƒê·ªìng', '070': 'B√¨nh Ph∆∞·ªõc', '072': 'T√¢y Ninh', '074': 'B√¨nh D∆∞∆°ng',
        '075': 'ƒê·ªìng Nai', '077': 'B√† R·ªãa - V≈©ng T√†u', '079': 'TP.H·ªì Ch√≠ Minh',
        '080': 'Long An', '082': 'Ti·ªÅn Giang', '083': 'B·∫øn Tre', '084': 'Tr√† Vinh',
        '086': 'Vƒ©nh Long', '087': 'ƒê·ªìng Th√°p', '089': 'An Giang', '091': 'Ki√™n Giang',
        '092': 'C·∫ßn Th∆°', '093': 'H·∫≠u Giang', '094': 'S√≥c TrƒÉng', '095': 'B·∫°c Li√™u',
        '096': 'C√† Mau'
    }
    
    # 1. Import d·ªØ li·ªáu h√†nh ch√≠nh c≈©
    print("  üì• Import d·ªØ li·ªáu h√†nh ch√≠nh c≈©...")
    for code, name in province_codes.items():
        cur.execute("""
        IF NOT EXISTS (SELECT 1 FROM DM_HanhChinhCu WHERE MaHanhChinhCu = ?)
        INSERT INTO DM_HanhChinhCu(MaHanhChinhCu, TenHanhChinhCu, GhiChu)
        VALUES (?, ?, N'ƒê∆°n v·ªã h√†nh ch√≠nh tr∆∞·ªõc s·∫Øp x·∫øp')
        """, (code, code, name))
    
    # 2. Import d·ªØ li·ªáu h√†nh ch√≠nh m·ªõi
    print("  üì• Import d·ªØ li·ªáu h√†nh ch√≠nh m·ªõi...")
    new_code = 1
    
    # T·ªânh/th√†nh kh√¥ng thay ƒë·ªïi
    for province in ADMIN_REORGANIZATION['unchanged']:
        ma_moi = f"M{new_code:03d}"
        cur.execute("""
        IF NOT EXISTS (SELECT 1 FROM DM_HanhChinhMoi WHERE MaHanhChinhMoi = ?)
        INSERT INTO DM_HanhChinhMoi(MaHanhChinhMoi, TenHanhChinhMoi, GhiChu)
        VALUES (?, ?, N'ƒê∆°n v·ªã kh√¥ng thay ƒë·ªïi')
        """, (ma_moi, ma_moi, province))
        new_code += 1
    
    # T·ªânh/th√†nh s√°p nh·∫≠p
    for merged in ADMIN_REORGANIZATION['merged']:
        ma_moi = f"M{new_code:03d}"
        cur.execute("""
        IF NOT EXISTS (SELECT 1 FROM DM_HanhChinhMoi WHERE MaHanhChinhMoi = ?)
        INSERT INTO DM_HanhChinhMoi(MaHanhChinhMoi, TenHanhChinhMoi, GhiChu)
        VALUES (?, ?, ?)
        """, (ma_moi, ma_moi, merged['new'], f"S√°p nh·∫≠p t·ª´: {', '.join(merged['includes'])}"))
        new_code += 1
    
    # 3. T·∫°o mapping gi·ªØa m·ªõi v√† c≈©
    print("  üîó T·∫°o mapping h√†nh ch√≠nh m·ªõi-c≈©...")
    
    # Mapping cho ƒë∆°n v·ªã kh√¥ng ƒë·ªïi
    for province in ADMIN_REORGANIZATION['unchanged']:
        # T√¨m m√£ c≈©
        old_code = None
        for code, name in province_codes.items():
            if name == province or f"Th√†nh ph·ªë {name}" == province or f"TP.{name}" == province:
                old_code = code
                break
        
        if old_code:
            # T√¨m m√£ m·ªõi
            cur.execute("SELECT MaHanhChinhMoi FROM DM_HanhChinhMoi WHERE TenHanhChinhMoi = ?", (province,))
            row = cur.fetchone()
            if row:
                ma_moi = row.MaHanhChinhMoi
                cur.execute("""
                IF NOT EXISTS (SELECT 1 FROM DM_HanhChinhMoi_Map_Cu WHERE MaHanhChinhMoi = ? AND MaHanhChinhCu = ?)
                INSERT INTO DM_HanhChinhMoi_Map_Cu(MaHanhChinhMoi, MaHanhChinhCu, TyLeDanSo, GhiChu)
                VALUES (?, ?, 100.0, N'Gi·ªØ nguy√™n')
                """, (ma_moi, old_code, ma_moi, old_code))
    
    # Mapping cho ƒë∆°n v·ªã s√°p nh·∫≠p
    for merged in ADMIN_REORGANIZATION['merged']:
        # T√¨m m√£ m·ªõi
        cur.execute("SELECT MaHanhChinhMoi FROM DM_HanhChinhMoi WHERE TenHanhChinhMoi = ?", (merged['new'],))
        row = cur.fetchone()
        if row:
            ma_moi = row.MaHanhChinhMoi
            
            # T·∫°o mapping cho t·ª´ng ƒë∆°n v·ªã c≈©
            for old_province in merged['includes']:
                old_code = None
                for code, name in province_codes.items():
                    if (name == old_province or 
                        f"Th√†nh ph·ªë {name}" == old_province or 
                        f"TP.{name}" == old_province or
                        name.replace("TP.", "Th√†nh ph·ªë ") == old_province):
                        old_code = code
                        break
                
                if old_code:
                    ty_le = round(100.0 / len(merged['includes']), 2)  # Chia ƒë·ªÅu t·ª∑ l·ªá
                    cur.execute("""
                    IF NOT EXISTS (SELECT 1 FROM DM_HanhChinhMoi_Map_Cu WHERE MaHanhChinhMoi = ? AND MaHanhChinhCu = ?)
                    INSERT INTO DM_HanhChinhMoi_Map_Cu(MaHanhChinhMoi, MaHanhChinhCu, TyLeDanSo, GhiChu)
                    VALUES (?, ?, ?, N'S√°p nh·∫≠p')
                    """, (ma_moi, old_code, ma_moi, old_code, ty_le))
    
    conn.commit()
    conn.close()
    print("‚úÖ Import d·ªØ li·ªáu h√†nh ch√≠nh th√†nh c√¥ng!")

def get_new_province_from_old(old_province: str) -> str:
    """
    Mapping t·ªânh c≈© sang t·ªânh m·ªõi
    
    Args:
        old_province: T√™n t·ªânh c≈©
        
    Returns:
        T√™n t·ªânh m·ªõi sau s·∫Øp x·∫øp
    """
    # Ki·ªÉm tra t·ªânh kh√¥ng ƒë·ªïi
    if old_province in ADMIN_REORGANIZATION['unchanged']:
        return old_province
    
    # Ki·ªÉm tra t·ªânh s√°p nh·∫≠p
    for merged in ADMIN_REORGANIZATION['merged']:
        if old_province in merged['includes']:
            return merged['new']
    
    # X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
    name_mappings = {
        'H√† N·ªôi': 'Th√†nh ph·ªë H√† N·ªôi',
        'TP.H·ªì Ch√≠ Minh': 'Th√†nh ph·ªë H·ªì Ch√≠ Minh',
        'H·∫£i Ph√≤ng': 'Th√†nh ph·ªë H·∫£i Ph√≤ng',
        'ƒê√† N·∫µng': 'Th√†nh ph·ªë ƒê√† N·∫µng',
        'C·∫ßn Th∆°': 'Th√†nh ph·ªë C·∫ßn Th∆°',
        'Th·ª´a Thi√™n Hu·∫ø': 'Th√†nh ph·ªë Hu·∫ø'
    }
    
    if old_province in name_mappings:
        return name_mappings[old_province]
    
    # T√¨m trong danh s√°ch s√°p nh·∫≠p
    for merged in ADMIN_REORGANIZATION['merged']:
        for include in merged['includes']:
            if (old_province == include or 
                old_province == include.replace('Th√†nh ph·ªë ', '') or
                old_province == include.replace('TP.', '')):
                return merged['new']
    
    return old_province  # Tr·∫£ v·ªÅ t√™n c≈© n·∫øu kh√¥ng t√¨m th·∫•y

def migrate_patient_provinces():
    """Migration th√¥ng tin t·ªânh c·ªßa b·ªánh nh√¢n - c·∫≠p nh·∫≠t tr·ª±c ti·∫øp c·ªôt Tinh"""
    conn = get_conn()
    cur = conn.cursor()
    
    print("üîÑ B·∫Øt ƒë·∫ßu migration th√¥ng tin t·ªânh b·ªánh nh√¢n...")
    
    # L·∫•y t·∫•t c·∫£ b·ªánh nh√¢n c√≥ th√¥ng tin t·ªânh
    cur.execute("SELECT BN_ID, Tinh FROM BenhNhan WHERE Tinh IS NOT NULL AND Tinh != ''")
    patients = cur.fetchall()
    
    migrated_count = 0
    unchanged_count = 0
    error_count = 0
    
    print(f"üìä T√¨m th·∫•y {len(patients)} b·ªánh nh√¢n c√≥ th√¥ng tin t·ªânh")
    
    for patient in patients:
        try:
            bn_id = patient.BN_ID
            old_province = patient.Tinh.strip()
            
            # Mapping sang t·ªânh m·ªõi
            new_province = get_new_province_from_old(old_province)
            
            # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu t√™n t·ªânh thay ƒë·ªïi
            if new_province != old_province:
                cur.execute("""
                UPDATE BenhNhan 
                SET Tinh = ?
                WHERE BN_ID = ?
                """, (new_province, bn_id))
                migrated_count += 1
                
                if migrated_count % 50 == 0:
                    print(f"  ‚úÖ ƒê√£ migration {migrated_count} b·ªánh nh√¢n...")
            else:
                unchanged_count += 1
                
        except Exception as e:
            error_count += 1
            print(f"  ‚ùå L·ªói migration b·ªánh nh√¢n {bn_id}: {e}")
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ Ho√†n th√†nh migration:")
    print(f"   - ƒê√£ c·∫≠p nh·∫≠t: {migrated_count} b·ªánh nh√¢n")
    print(f"   - Kh√¥ng thay ƒë·ªïi: {unchanged_count} b·ªánh nh√¢n") 
    print(f"   - L·ªói: {error_count} b·ªánh nh√¢n")

def run_full_migration():
    """Ch·∫°y to√†n b·ªô migration h√†nh ch√≠nh"""
    print("üöÄ B·∫Øt ƒë·∫ßu migration h·ªá th·ªëng h√†nh ch√≠nh (NQ 202/2025/QH15)")
    print("=" * 70)
    
    try:
        # 1. T·∫°o b·∫£ng
        create_admin_tables()
        print()
        
        # 2. Populate d·ªØ li·ªáu  
        populate_admin_data()
        print()
        
        # 3. Migration b·ªánh nh√¢n
        migrate_patient_provinces()
        print()
        
        print("=" * 70)
        print("‚úÖ HO√ÄN TH√ÄNH MIGRATION H·ªÜ TH·ªêNG H√ÄNH CH√çNH!")
        print("üìä C√°c b·∫£ng ƒë√£ ƒë∆∞·ª£c t·∫°o:")
        print("   - DM_HanhChinhMoi: Danh m·ª•c h√†nh ch√≠nh m·ªõi")
        print("   - DM_HanhChinhCu: Danh m·ª•c h√†nh ch√≠nh c≈©") 
        print("   - DM_HanhChinhMoi_Map_Cu: B·∫£ng mapping")
        print("   - BenhNhan: C·∫≠p nh·∫≠t c·ªôt Tinh v·ªõi t√™n m·ªõi")
        
    except Exception as e:
        print(f"‚ùå L·ªói migration: {e}")
        return False
    
    return True

if __name__ == "__main__":
    run_full_migration()