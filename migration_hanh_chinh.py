#!/usr/bin/env python3
"""
Migration tool for administrative division reorganization (NQ 202/2025/QH15)
C√¥ng c·ª• migration s·∫Øp x·∫øp ƒë∆°n v·ªã h√†nh ch√≠nh
"""

import json
from db import get_conn
from datetime import datetime

# D·ªØ li·ªáu s·∫Øp x·∫øp h√†nh ch√≠nh theo NQ 202/2025/QH15
ADMIN_REORGANIZATION = {
    "merged": [
        {"new": "Tuy√™n Quang", "includes": ["H√† Giang", "Tuy√™n Quang"]},
        {"new": "L√†o Cai", "includes": ["L√†o Cai", "Y√™n B√°i"]},
        {"new": "Th√°i Nguy√™n", "includes": ["B·∫Øc K·∫°n", "Th√°i Nguy√™n"]},
        {"new": "Ph√∫ Th·ªç", "includes": ["H√≤a B√¨nh", "Vƒ©nh Ph√∫c", "Ph√∫ Th·ªç"]},
        {"new": "B·∫Øc Ninh", "includes": ["B·∫Øc Giang", "B·∫Øc Ninh"]},
        {"new": "H∆∞ng Y√™n", "includes": ["Th√°i B√¨nh", "H∆∞ng Y√™n"]},
        {"new": "Th√†nh ph·ªë H·∫£i Ph√≤ng", "includes": ["H·∫£i D∆∞∆°ng", "Th√†nh ph·ªë H·∫£i Ph√≤ng"]},
        {"new": "Ninh B√¨nh", "includes": ["H√† Nam", "Ninh B√¨nh", "Nam ƒê·ªãnh"]},
        {"new": "Qu·∫£ng Tr·ªã", "includes": ["Qu·∫£ng B√¨nh", "Qu·∫£ng Tr·ªã"]},
        {"new": "Th√†nh ph·ªë ƒê√† N·∫µng", "includes": ["Qu·∫£ng Nam", "Th√†nh ph·ªë ƒê√† N·∫µng"]},
        {"new": "Qu·∫£ng Ng√£i", "includes": ["Qu·∫£ng Ng√£i", "Kon Tum"]},
        {"new": "Gia Lai", "includes": ["Gia Lai", "B√¨nh ƒê·ªãnh"]},
        {"new": "ƒê·∫Øk L·∫Øk", "includes": ["Ph√∫ Y√™n", "ƒê·∫Øk L·∫Øk"]},
        {"new": "Kh√°nh H√≤a", "includes": ["Kh√°nh H√≤a", "Ninh Thu·∫≠n"]},
        {"new": "L√¢m ƒê·ªìng", "includes": ["ƒê·∫Øk N√¥ng", "L√¢m ƒê·ªìng", "B√¨nh Thu·∫≠n"]},
        {"new": "Th√†nh ph·ªë H·ªì Ch√≠ Minh", "includes": ["B√¨nh D∆∞∆°ng", "Th√†nh ph·ªë H·ªì Ch√≠ Minh", "B√† R·ªãa - V≈©ng T√†u"]},
        {"new": "ƒê·ªìng Nai", "includes": ["B√¨nh Ph∆∞·ªõc", "ƒê·ªìng Nai"]},
        {"new": "T√¢y Ninh", "includes": ["Long An", "T√¢y Ninh"]},
        {"new": "Th√†nh ph·ªë C·∫ßn Th∆°", "includes": ["S√≥c TrƒÉng", "H·∫≠u Giang", "Th√†nh ph·ªë C·∫ßn Th∆°"]},
        {"new": "Vƒ©nh Long", "includes": ["B·∫øn Tre", "Vƒ©nh Long", "Tr√† Vinh"]},
        {"new": "ƒê·ªìng Th√°p", "includes": ["Ti·ªÅn Giang", "ƒê·ªìng Th√°p"]},
        {"new": "C√† Mau", "includes": ["B·∫°c Li√™u", "C√† Mau"]},
        {"new": "An Giang", "includes": ["Ki√™n Giang", "An Giang"]}
    ],
    "unchanged": [
        "Th√†nh ph·ªë H√† N·ªôi", "Cao B·∫±ng", "ƒêi·ªán Bi√™n", "H√† Tƒ©nh",
        "Lai Ch√¢u", "L·∫°ng S∆°n", "Ngh·ªá An", "Qu·∫£ng Ninh",
        "Thanh H√≥a", "S∆°n La", "Th√†nh ph·ªë Hu·∫ø"
    ]
}

def get_new_province_from_old(old_province: str) -> str:
    """
    Mapping t·ªânh c≈© sang t·ªânh m·ªõi
    
    Args:
        old_province: T√™n t·ªânh c≈©
        
    Returns:
        T√™n t·ªânh m·ªõi sau s·∫Øp x·∫øp
    """
    # Ki·ªÉm tra t·ªânh kh√¥ng ƒë·ªïi
    if old_province in ADMIN_REORGANIZATION['unchanged']:
        return old_province
    
    # Ki·ªÉm tra t·ªânh s√°p nh·∫≠p
    for merged in ADMIN_REORGANIZATION['merged']:
        if old_province in merged['includes']:
            return merged['new']
    
    # X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
    name_mappings = {
        'H√† N·ªôi': 'Th√†nh ph·ªë H√† N·ªôi',
        'TP.H·ªì Ch√≠ Minh': 'Th√†nh ph·ªë H·ªì Ch√≠ Minh',
        'H·∫£i Ph√≤ng': 'Th√†nh ph·ªë H·∫£i Ph√≤ng',
        'ƒê√† N·∫µng': 'Th√†nh ph·ªë ƒê√† N·∫µng',
        'C·∫ßn Th∆°': 'Th√†nh ph·ªë C·∫ßn Th∆°',
        'Th·ª´a Thi√™n Hu·∫ø': 'Th√†nh ph·ªë Hu·∫ø'
    }
    
    if old_province in name_mappings:
        return name_mappings[old_province]
    
    # T√¨m trong danh s√°ch s√°p nh·∫≠p
    for merged in ADMIN_REORGANIZATION['merged']:
        for include in merged['includes']:
            if (old_province == include or 
                old_province == include.replace('Th√†nh ph·ªë ', '') or
                old_province == include.replace('TP.', '')):
                return merged['new']
    
    return old_province  # Tr·∫£ v·ªÅ t√™n c≈© n·∫øu kh√¥ng t√¨m th·∫•y

def migrate_patient_provinces():
    """Migration th√¥ng tin t·ªânh c·ªßa b·ªánh nh√¢n - c·∫≠p nh·∫≠t tr·ª±c ti·∫øp c·ªôt Tinh"""
    conn = get_conn()
    cur = conn.cursor()
    
    print("üîÑ B·∫Øt ƒë·∫ßu migration th√¥ng tin t·ªânh b·ªánh nh√¢n...")
    
    # L·∫•y t·∫•t c·∫£ b·ªánh nh√¢n c√≥ th√¥ng tin t·ªânh
    cur.execute("SELECT BN_ID, Tinh FROM BenhNhan WHERE Tinh IS NOT NULL AND Tinh != ''")
    patients = cur.fetchall()
    
    migrated_count = 0
    unchanged_count = 0
    error_count = 0
    
    print(f"üìä T√¨m th·∫•y {len(patients)} b·ªánh nh√¢n c√≥ th√¥ng tin t·ªânh")
    
    for patient in patients:
        try:
            bn_id = patient.BN_ID
            old_province = patient.Tinh.strip()
            
            # Mapping sang t·ªânh m·ªõi
            new_province = get_new_province_from_old(old_province)
            
            # Ch·ªâ c·∫≠p nh·∫≠t n·∫øu t√™n t·ªânh thay ƒë·ªïi
            if new_province != old_province:
                cur.execute("""
                UPDATE BenhNhan 
                SET Tinh = ?
                WHERE BN_ID = ?
                """, (new_province, bn_id))
                migrated_count += 1
                
                if migrated_count % 50 == 0:
                    print(f"  ‚úÖ ƒê√£ migration {migrated_count} b·ªánh nh√¢n...")
            else:
                unchanged_count += 1
                
        except Exception as e:
            error_count += 1
            print(f"  ‚ùå L·ªói migration b·ªánh nh√¢n {bn_id}: {e}")
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ Ho√†n th√†nh migration:")
    print(f"   - ƒê√£ c·∫≠p nh·∫≠t: {migrated_count} b·ªánh nh√¢n")
    print(f"   - Kh√¥ng thay ƒë·ªïi: {unchanged_count} b·ªánh nh√¢n") 
    print(f"   - L·ªói: {error_count} b·ªánh nh√¢n")

def run_full_migration():
    print("=" * 70)
    try:

        # 3. Migration b·ªánh nh√¢n
        migrate_patient_provinces()
        print()
        
    except Exception as e:
        print(f"‚ùå L·ªói migration: {e}")
        return False
    
    return True

if __name__ == "__main__":
    run_full_migration()